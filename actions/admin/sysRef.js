const Ref = require('../../models/ref')
const User = require('../../models/user')

const dateConfig = { year: 'numeric',month:'numeric',day:'numeric',hour:'numeric',minute: 'numeric'}
const Markup = require('telegraf/markup')

const defaultShift = 20

module.exports = async (ctx) => {
  if(!ctx.state[0]) ctx.state[0] = 0
  
  if(isNaN(ctx.state[0])) {
    await ctx.answerCbQuery()

    const [
      result,
      alive,
    ] = await Promise.all([
      Ref.findOne({ name: ctx.state[0] }),

      User.countDocuments({ from: `ref-${ctx.state[0]}`, alive: true })
    ])

    return ctx.editMessageText(`
–í—Å–µ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: ${result.count}
–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: ${result.uniqueCount} (${Math.round(result.uniqueCount / result.count * 100)}%)
–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${result.newCount} (${Math.round(result.newCount / result.uniqueCount * 100)}%)
–ñ–∏–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${alive} (${Math.round(alive / result.newCount * 100)}%)

–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ—Ö–æ–¥: ${new Date(result.last).toLocaleString('ru', dateConfig)}

–°—Å—ã–ª–∫–∞: https://t.me/${process.env.BOT_USERNAME}?start=ref-${result.name}
    `, Markup.inlineKeyboard([
      [Markup.callbackButton(`üîÑ –û–±–Ω–æ–≤–∏—Ç—å`, `admin_sysRef_${result.name}`)],
      [Markup.callbackButton(`–ù–∞–∑–∞–¥`, `admin_sysRef`)]
    ]).extra({ 
      parse_mode: 'HTML',
      disable_web_page_preview: true
    }))
  }

  let shift = Number(ctx.state[0])
  const count = await Ref.countDocuments()
  if(shift < 0 || shift >= count) return ctx.answerCbQuery('–ù–µ–ª—å–∑—è', true)
  await ctx.answerCbQuery()

  if(!count) return ctx.editMessageText(`–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n
<code>https://t.me/${process.env.BOT_USERNAME}?start=ref-</code>code, –ø–µ—Ä–µ—Ö–æ–¥—è –ø–æ —Ç–∞–∫–æ–π —Å—Å—ã–ª–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ.
code - –ª—é–±–æ–π –∫–æ–¥ –¥–ª—è –æ—Ç–ª–∏—á–∏—è —Å—Å—ã–ª–∫–∏ –æ—Ç –¥—Ä—É–≥–∏—Ö —Å—Å—ã–ª–æ–∫`, Markup.inlineKeyboard(
    [Markup.callbackButton(`–ù–∞–∑–∞–¥`, `admin_back`)]
  ).extra({ 
    parse_mode: 'HTML',
    disable_web_page_preview: true
  }))

  const results = await Ref.find().skip(shift).limit(defaultShift).sort({ _id: -1 })
  
  let content = results.map(result => `<b>${result.name}</b>: ${result.count} / ${result.uniqueCount}`)
  const keyboard = results.map(result => Markup.callbackButton(`${result.name} ${result.count}`, `admin_sysRef_${result.name}`))

  return ctx.editMessageText(`
<code>https://t.me/${process.env.BOT_USERNAME}?start=ref-</code>code

${content.join('\n')}`, {
    parse_mode: 'HTML',
    reply_markup: { 
      inline_keyboard: Markup.inlineKeyboard(keyboard, { columns: 2 }).inline_keyboard.concat([
        [Markup.callbackButton(`‚óÄÔ∏è`, `admin_sysRef_${shift - defaultShift}`),
        Markup.callbackButton(`${shift + results.length}/${count} üîÑ`, `admin_sysRef_${shift}`),
        Markup.callbackButton(`‚ñ∂Ô∏è`, `admin_sysRef_${shift + defaultShift}`)],
        [Markup.callbackButton(`–ù–∞–∑–∞–¥`, `admin_back`)]
      ])
    }
  })
}