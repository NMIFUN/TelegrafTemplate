const Markup = require('telegraf/markup')
const dateConfig = {
    year: 'numeric',
    month: 'numeric',
    day: 'numeric',
    hour: 'numeric',
    minute: 'numeric',
}
const { ObjectId } = require('mongodb')
const statuses = {
    stopped: `‚èπ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`,
    paused: `‚è∏ –†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞`,
    ended: `üì¨ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`,
    doing: `üïí –†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è`,
    notStarted: `üõ† –†–∞—Å—Å—ã–ª–∫–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç–∞`,
}

const parts = [
    '‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì',
    '‚ñà‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì',
    '‚ñà‚ñà‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì',
    '‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì',
    '‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì',
    '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì‚ñì‚ñì',
    '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì‚ñì',
    '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì‚ñì',
    '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì‚ñì',
    '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì',
    '‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà',
]

module.exports = async (ctx) => {
    let a

    if (!ctx.state[0]) a = 0
    else if (isNaN(ctx.state[0]))
        a =
            (await ctx.Mail.countDocuments({
                _id: { $gte: ObjectId(ctx.state[0]) },
            })) - 1
    else a = Number(ctx.state[0])

    if (a < 0) return ctx.answerCbQuery('–ù–µ–ª—å–∑—è', true)

    const count = await ctx.Mail.countDocuments()
    if (a !== 0 && a + 1 > count) return ctx.answerCbQuery('–ù–µ–ª—å–∑—è', true)

    await ctx.answerCbQuery()

    ctx.user.state = null

    if (count === 0)
        return ctx.editMessageText(`–ù–µ—Ç —Ä–∞—Å—Å—ã–ª–æ–∫`, {
            reply_markup: Markup.inlineKeyboard([
                [Markup.callbackButton(`–î–æ–±–∞–≤–∏—Ç—å`, `admin_mail_add`)],
                [Markup.callbackButton(`‚Äπ –ù–∞–∑–∞–¥`, `admin_back`)],
            ]),
            parse_mode: 'HTML',
        })
    else {
        await ctx.deleteMessage().catch(() => {})
        const result = await ctx.Mail.findOne().skip(a).sort({ _id: -1 })

        let extraKeyboard = [
            [
                Markup.callbackButton(`‚óÄÔ∏è`, `admin_mail_id_${a - 1}`),
                Markup.callbackButton(`üîÑ`, `admin_mail_id_${a}`),
                Markup.callbackButton(`‚ñ∂Ô∏è`, `admin_mail_id_${a + 1}`),
            ],
            [Markup.callbackButton(statuses[result.status], `admin_mail_none`)],
        ]

        if (result.status === 'notStarted')
            extraKeyboard = extraKeyboard.concat([
                [
                    Markup.callbackButton(
                        `üîò –ö–Ω–æ–ø–∫–∏ ${result.keyboard.length ? '‚úÖ' : '‚ùå'}`,
                        `admin_mail_keyboard_${result._id}`
                    ),
                    Markup.callbackButton(
                        `üßπ`,
                        `admin_mail_keyboard_${result._id}_del`
                    ),
                ],
                [
                    Markup.callbackButton(
                        `ü´Ç –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π ${
                            result.quantity === 0 ? '–≤—Å–µ' : result.quantity
                        }`,
                        `admin_mail_quantity_${result._id}`
                    ),
                    Markup.callbackButton(
                        `üßπ`,
                        `admin_mail_quantity_${result._id}_del`
                    ),
                ],
                [
                    Markup.callbackButton(
                        `üè≥Ô∏è –Ø–∑—ã–∫ ${result.lang === null ? '–≤—Å–µ' : result.lang}`,
                        `admin_mail_lang_${result._id}`
                    ),
                    Markup.callbackButton(
                        `üßπ`,
                        `admin_mail_lang_${result._id}_del`
                    ),
                ],
                [
                    Markup.callbackButton(
                        `‚è± –í—Ä–µ–º—è ${
                            result.startDate
                                ? new Date(result.startDate).toLocaleString(
                                      'ru',
                                      dateConfig
                                  )
                                : '‚ùå'
                        }`,
                        `admin_mail_startDate_${result._id}`
                    ),
                    Markup.callbackButton(
                        `üßπ`,
                        `admin_mail_startDate_${result._id}_del`
                    ),
                ],
                [
                    Markup.callbackButton(
                        `üåê –ü—Ä–µ–≤—å—é ${result.preview ? '‚úÖ' : '‚ùå'}`,
                        `admin_mail_preview_${result._id}`
                    ),
                    Markup.callbackButton(
                        `üìÉ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç`,
                        `admin_mail_editPost_${result._id}`
                    ),
                ],
                [
                    Markup.callbackButton(
                        `üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É`,
                        `admin_mail_start_${result._id}`
                    ),
                ],
            ])
        else {
            const processKeyboard = [
                [
                    Markup.callbackButton(
                        `üì¨ –£—Å–ø–µ—à–Ω–æ ${result.success}`,
                        `admin_mail_none`
                    ),
                    Markup.callbackButton(
                        `üì´ –ù–µ—É—Å–ø–µ—à–Ω–æ ${result.unsuccess}`,
                        `admin_mail_none`
                    ),
                ],
                [
                    Markup.callbackButton(
                        `üï∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ${parseInt(
                            ((result.endDate ? result.endDate : Date.now()) -
                                result.startDate) /
                                (1000 * 60)
                        ).toFixed(1)} –º–∏–Ω.`,
                        `admin_mail_none`
                    ),
                ],
            ]

            if (result.status === 'doing')
                processKeyboard.push([
                    Markup.callbackButton(
                        `‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å`,
                        `admin_mail_action_${result._id}_pause`
                    ),
                    Markup.callbackButton(
                        `‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å`,
                        `admin_mail_action_${result._id}_stop`
                    ),
                ])
            else if (result.status === 'paused')
                processKeyboard.push([
                    Markup.callbackButton(
                        `‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å`,
                        `admin_mail_action_${result._id}_continue`
                    ),
                    Markup.callbackButton(
                        `‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å`,
                        `admin_mail_action_${result._id}_stop`
                    ),
                ])
            extraKeyboard = extraKeyboard.concat(processKeyboard)
        }

        extraKeyboard = extraKeyboard.concat([
            [
                Markup.switchToChatButton(
                    `‚úàÔ∏è –ü–æ–¥–µ–ª–∏—Ç—å—Å—è`,
                    `mail_${result._id}`
                ),
                Markup.callbackButton(
                    `üóë –£–¥–∞–ª–∏—Ç—å`,
                    `admin_mail_delete_${result._id}`
                ),
            ],
            [
                Markup.callbackButton(`–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É`, `admin_mail_add`),
                Markup.callbackButton(`‚Äπ –ù–∞–∑–∞–¥`, `admin_back`),
            ],
        ])
        const keyboard = result.keyboard.concat(extraKeyboard)

        const procent = (result.success + result.unsuccess) / result.all
        const time = new Date()
        time.setSeconds(
            time.getSeconds() +
                (result.all - result.success - result.unsuccess) * 0.016
        )

        const text = `${statuses[result.status]}

${
    result.status === 'notStarted'
        ? result.startDate
            ? `–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ ${new Date(result.startDate).toLocaleString(
                  'ru',
                  dateConfig
              )}`
            : `–ù–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞`
        : `${
              result.status !== 'completed'
                  ? `üèÉ –ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: [${
                        parts[Math.round(procent * 10)]
                    }] - ${result.success + result.unsuccess}/${
                        result.all
                    } - ${Math.floor(procent * 100)}%`
                  : ''
          }

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
üì¨ –£—Å–ø–µ—à–Ω–æ: ${result.success}
üì≠ –ù–µ—É—Å–ø–µ—à–Ω–æ: ${result.unsuccess}

${
    ctx.from.id === 305544740
        ? `‚ö†Ô∏è –û—à–∏–±–∫–∏: ${Object.entries(result.errorsCount)
              .map(([key, value]) => `${key} ${value}`)
              .join(', ')}\n`
        : ''
}
${
    result.status === 'doing'
        ? `‚åöÔ∏è –û–∫–æ–Ω—á–∞–Ω–∏–µ —á–µ—Ä–µ–∑ ‚âà${Math.round(
              (time - new Date()) / (1000 * 60)
          )} –º–∏–Ω.`
        : result.status !== 'notStarted'
        ? `üï∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ${Math.round(
              ((result.endDate ? new Date(result.endDate) : new Date()) -
                  new Date(result.startDate)) /
                  (1000 * 60)
          )} –º–∏–Ω.`
        : ''
}
`
}`
        delete result.message.chat

        if (result.status === 'notStarted')
            return ctx.telegram.sendCopy(ctx.from.id, result.message, {
                reply_markup: Markup.inlineKeyboard(keyboard),
                disable_web_page_preview: !result.preview,
            })
        else
            return ctx.replyWithHTML(text, {
                reply_markup: Markup.inlineKeyboard(keyboard),
            })
    }
}
